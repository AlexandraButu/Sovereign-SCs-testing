// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct FeeMarketProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for FeeMarketProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = FeeMarketProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        FeeMarketProxyMethods { wrapped_tx: tx }
    }
}

pub struct FeeMarketProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> FeeMarketProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg3: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        esdt_safe_address: Arg0,
        price_aggregator_address: Arg1,
        usdc_token_id: Arg2,
        wegld_token_id: Arg3,
    ) -> TxProxyDeploy<Env, From, Gas, ()> {
        self.wrapped_tx
            .raw_deploy()
            .argument(&esdt_safe_address)
            .argument(&price_aggregator_address)
            .argument(&usdc_token_id)
            .argument(&wegld_token_id)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> FeeMarketProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxProxyUpgrade<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> FeeMarketProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn enable_fee(
        self,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("enableFee")
            .original_result()
    }

    pub fn disable_fee(
        self,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("disableFee")
            .original_result()
    }

    pub fn add_fee<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<FeeType<Env::Api>>,
    >(
        self,
        base_token: Arg0,
        fee_type: Arg1,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("addFee")
            .argument(&base_token)
            .argument(&fee_type)
            .original_result()
    }

    pub fn remove_fee<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        base_token: Arg0,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("removeFee")
            .argument(&base_token)
            .original_result()
    }

    pub fn token_fee<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        token_id: Arg0,
    ) -> TxProxyCall<Env, From, To, Gas, FeeType<Env::Api>> {
        self.wrapped_tx
            .raw_call("getTokenFee")
            .argument(&token_id)
            .original_result()
    }

    pub fn add_users_to_whitelist<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        users: Arg0,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("addUsersToWhitelist")
            .argument(&users)
            .original_result()
    }

    pub fn remove_users_from_whitelist<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        users: Arg0,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("removeUsersFromWhitelist")
            .argument(&users)
            .original_result()
    }

    /// Percentages have to be between 0 and 10_000, and must all add up to 100% (i.e. 10_000) 
    pub fn distribute_fees<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, MultiValue2<ManagedAddress<Env::Api>, usize>>>,
    >(
        self,
        address_percentage_pairs: Arg0,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("distributeFees")
            .argument(&address_percentage_pairs)
            .original_result()
    }

    pub fn subtract_fee<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<usize>,
        Arg2: ProxyArg<OptionalValue<u64>>,
    >(
        self,
        original_caller: Arg0,
        total_transfers: Arg1,
        opt_gas_limit: Arg2,
    ) -> TxProxyCall<Env, From, To, Gas, FinalPayment<Env::Api>> {
        self.wrapped_tx
            .raw_call("subtractFee")
            .argument(&original_caller)
            .argument(&total_transfers)
            .argument(&opt_gas_limit)
            .original_result()
    }

    pub fn users_whitelist(
        self,
    ) -> TxProxyCall<Env, From, To, Gas, MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>> {
        self.wrapped_tx
            .raw_call("getUsersWhitelist")
            .original_result()
    }

    pub fn set_min_valid_signers<
        Arg0: ProxyArg<u32>,
    >(
        self,
        new_value: Arg0,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("setMinValidSigners")
            .argument(&new_value)
            .original_result()
    }

    pub fn add_signers<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        signers: Arg0,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("addSigners")
            .argument(&signers)
            .original_result()
    }

    pub fn remove_signers<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        signers: Arg0,
    ) -> TxProxyCall<Env, From, To, Gas, ()> {
        self.wrapped_tx
            .raw_call("removeSigners")
            .argument(&signers)
            .original_result()
    }
}

#[rustfmt::skip]
#[type_abi]
#[derive(TopEncode, TopDecode)]
pub enum FeeType<Api>
where
    Api: ManagedTypeApi,
{
    None,
    Fixed {
        token: TokenIdentifier<Api>,
        per_transfer: BigUint<Api>,
        per_gas: BigUint<Api>,
    },
    AnyToken {
        base_fee_token: TokenIdentifier<Api>,
        per_transfer: BigUint<Api>,
        per_gas: BigUint<Api>,
    },
}

#[type_abi]
#[derive(TopEncode, TopDecode)]
pub struct FinalPayment<Api>
where
    Api: ManagedTypeApi,
{
    pub fee: EsdtTokenPayment<Api>,
    pub remaining_tokens: EsdtTokenPayment<Api>,
}
